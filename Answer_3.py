# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bvmYIPq3JZ9pWSGE3sBk5zQH2y-5BlHH
"""

import tensorflow as tf
from tensorflow.keras import layers

#Loading and preprocessing the dataset
(X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()
X_train = X_train / 255.0  #Normalizing pixel values
X_test = X_test / 255.0
X_train = X_train.reshape(-1, 28 * 28)  #Flattening images and making them suitable for the input layer
X_test = X_test.reshape(-1, 28 * 28)

#model architecture
model = tf.keras.Sequential([
    layers.Input(shape=(28 * 28,)),  # Input layer
    layers.Dense(128, activation='relu'),  # Hidden layer 1
    layers.Dense(64, activation='relu'),   # Hidden layer 2
    layers.Dense(32, activation='relu'),   # Hidden layer 3
    layers.Dense(10, activation='softmax')  # Output layer
])

#Compiling the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

#Training the model
model.fit(X_train, y_train, epochs=10, validation_split=0.2)

# Evaluation
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print("Test Accuracy:", test_accuracy)